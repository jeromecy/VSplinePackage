var_v <- dP+n*diag(n)/gamma
M <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
#inM=solve(M)
R  <- chol(M)
inM<- solve(R)%*%solve(t(R))
# ob<- c(Y,V)
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
pd <- inW %*%t(TT)%*%inM
pe <- inM%*%TT%*%inW
return(list(pbc=pbc,pd=pd,pe=pe,inW=inW))
}
adapBayesVSpline<- function(X,Y,V,coff,w,gamma,est){
alt <- X
ob<- c(Y,V)
bc<- coff$pbc%*%ob
d <- coff$pd%*%ob
n<- length(X)
phi=matrix(c(1,est),nrow=2,ncol=1)
xi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)  xi[i,1]=kernelR1adap(X[i],est,w,alt)
psi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)
psi[i,1]=dotR1adap(X[i],est,w,alt)
newPa <- c(xi,psi)
mu <- t(phi)%*%d+t(newPa)%*%bc
sig<- kernelR1adap(est,est,w,alt) + t(phi)%*%coff$inW%*%phi- t(newPa)%*%coff$pbc%*%newPa -
t(phi)%*%coff$pd%*%newPa - t(newPa)%*%coff$pe%*%phi
dphi=matrix(c(0,1),nrow=2,ncol=1)
dxi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n) dxi[i,1]=dR1adap(X[i],est,w,alt)
dpsi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n) dpsi[i,1]=ddotR1adap(X[i],est,w,alt)
dnewPa <- c(dxi,dpsi)
mv <- t(dphi)%*%d+t(dnewPa)%*%bc
return(list(mu=mu,sig=sig,mv = mv))
}
X=s
Y=r
V=v1
W <- diag(length(X))
U <- diag(length(X))
GPmean_x2  <- numeric(length(x_star))
coff2    <- cofBayesVSpline(X,Y,V,W,U,log(c(lambda[1],gamma)))
for(l in 1:length(x_star)){
gen2        <- BayesVSpline(X,Y,V,coff2,x_star[l])
GPmean_x2[l]<- gen2$mu
}
GPmean_x2
GPmean_x
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
GPmean_x2
GPmean_x
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
coff2$pe
coff$pe
coff$pd
coff2$pd
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1adap(X[j],X[i],w,alt)
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=dR1adap(X[j],X[i],w,alt)
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=ddotR1adap(X[j],X[i],w,alt)
TT<- rbind(S,dS)
var_y <- Q+n*diag(n)
cov_yv<- P
cov_vy<- dQ
var_v <- dP+n*diag(n)/gamma
M <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
#inM=solve(M)
R  <- chol(M)
inM<- solve(R)%*%solve(t(R))
# ob<- c(Y,V)
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
pd <- inW %*%t(TT)%*%inM
pe <- inM%*%TT%*%inW
pe
M
dP
kernelR1adap
Q
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
X
s<- seq(0.1,0.9,length=10)
s<- seq(0.1,0.9,length=10)
r<- c(0.6,0.6,0.7,1.3,0.8,0.9,0.8,0.85,0.85,1.1,0.8,1)[1:length(s)]
v1 <- c(diff(r)/diff(s),0)
lambda <- rep(0.001,length(s)-1)
#lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
X=s
Y=r
V=v1
W <- diag(length(X))
U <- diag(length(X))
GPmean_x2  <- numeric(length(x_star))
coff2    <- cofBayesVSpline(X,Y,V,W,U,log(c(lambda[1],gamma)))
for(l in 1:length(x_star)){
gen2        <- BayesVSpline(X,Y,V,coff2,x_star[l])
GPmean_x2[l]<- gen2$mu
}
GPmean_x2
GPmean_x
X
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1adap(X[j],X[i],w,alt)
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
Q
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1adap(X[j],X[i],w,alt)
Q
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
s<- seq(0,1,length=10)
r<- c(0.6,0.6,0.7,1.3,0.8,0.9,0.8,0.85,0.85,1.1,0.8,1)[1:length(s)]
v1 <- c(diff(r)/diff(s),0)
lambda <- rep(0.001,length(s)-1)
#lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
X=s
Y=r
V=v1
W <- diag(length(X))
U <- diag(length(X))
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
kernelR1adap<- function(x,y,w,alt){
v   <- min(x,y)
#alt <- c(0,alt,1)
#w   <- c(Inf,w,Inf,Inf)
l   <- findInterval(v,alt)
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(x-ti1)*(y-ti1)^2/2+(x-ti)*(y-ti)^2/2+
(y-ti1)^3/6-(y-ti)^3/6)/w[1:(l-1)])
p2<- (-(x-v)*(y-v)^2/2+(x-alt[l])*(y-alt[l])^2/2+
(y-v)^3/6-(y-alt[l])^3/6)/w[l]
out <- p1+p2
return(out)
}
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
kernelR1adap
alt
w
w=lambda
w
n   = length(X)
alt = X
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
w
w=c(Inf,lambda,Inf)
S     = matrix(0,nrow=n,ncol=2)
S[,1] = 1
S[,2] = X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
w
X
length(w)
length(s)
kernelR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
#w   <- c(Inf,w,Inf,Inf)
l   <- findInterval(v,alt)
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(x-ti1)*(y-ti1)^2/2+(x-ti)*(y-ti)^2/2+
(y-ti1)^3/6-(y-ti)^3/6)/w[1:(l-1)])
p2<- (-(x-v)*(y-v)^2/2+(x-alt[l])*(y-alt[l])^2/2+
(y-v)^3/6-(y-alt[l])^3/6)/w[l]
out <- p1+p2
return(out)
}
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
kernelR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(x-ti1)*(y-ti1)^2/2+(x-ti)*(y-ti)^2/2+
(y-ti1)^3/6-(y-ti)^3/6)/w[1:(l-1)])
p2<- (-(x-v)*(y-v)^2/2+(x-alt[l])*(y-alt[l])^2/2+
(y-v)^3/6-(y-alt[l])^3/6)/w[l]
out <- p1+p2
return(out)
}
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=kernelR1adap(X[j],X[i],w,alt)
Q
kernelR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(x-ti1)*(y-ti1)^2/2+(x-ti)*(y-ti)^2/2+
(y-ti1)^3/6-(y-ti)^3/6)/w[1:(l-1)])
p2<- (-(x-v)*(y-v)^2/2+(x-alt[l])*(y-alt[l])^2/2+
(y-v)^3/6-(y-alt[l])^3/6)/w[l]
out <- p1+p2
return(out)
}
dotR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
tl  <- alt[l]
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(y-ti1)^2/2+(y-ti)^2/2)/w[1:(l-1)])
p2<- (y*v-v^2/2-y*alt[l]+alt[l]^2/2)/w[l]
out <- p1+p2
return(out)
}
dR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
tl  <- alt[l]
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
p1<- sum((-(x-ti1)^2/2+(x-ti)^2/2)/w[1:(l-1)])
p2<- (x*v-v^2/2-x*alt[l]+alt[l]^2/2)/w[l]
out <- p1+p2
return(out)
}
ddotR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
tl  <- alt[l]
ti1 <- alt[2:l]     ### t[i+1]
ti  <- alt[1:(l-1)] ### t[i]
out<- sum((ti1-ti)/w[1:(l-1)])+(v-alt[l])/w[l]
return(out)
}
ddotdotR1adap<- function(x,y,w,alt){
v   <- min(x,y)
alt <- c(0,alt,1)
w   <- c(w,Inf)
l   <- findInterval(v,alt)
if(y>=x) return(0)
else if(y<x)  return(1/w[l])
}
# dotdotR1adap<- function(x,y,w,alt){
#   if(y>=x) return(y-x)
#   else if(y<x)  return(0)
# }
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1adap(X[j],X[i],w,alt)
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=dR1adap(X[j],X[i],w,alt)
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=ddotR1adap(X[j],X[i],w,alt)
P
dS
dP
dQ
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
X=s
Y=r
V=v1
W <- diag(length(X))
U <- diag(length(X))
GPmean_x2  <- numeric(length(x_star))
coff2    <- cofBayesVSpline(X,Y,V,W,U,log(c(lambda[1],gamma)))
for(l in 1:length(x_star)){
gen2        <- BayesVSpline(X,Y,V,coff2,x_star[l])
GPmean_x2[l]<- gen2$mu
}
GPmean_x2
GPmean_x
lambda <- rep(0.001,length(s)-1)
#lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
GPmean_x
vsp$y
s<- seq(0.1,0.9,length=10)
r<- c(0.6,0.6,0.7,1.3,0.8,0.9,0.8,0.85,0.85,1.1,0.8,1)[1:length(s)]
v1 <- c(diff(r)/diff(s),0)
lambda <- rep(0.001,length(s)-1)
#lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
GPmean_x
vsp$y
s<- seq(0,1,length=10)
r<- c(0.6,0.6,0.7,1.3,0.8,0.9,0.8,0.85,0.85,1.1,0.8,1)[1:length(s)]
v1 <- c(diff(r)/diff(s),0)
lambda <- rep(0.001,length(s)-1)
#lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.1
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
sp_cons
#lambda <- rep(0.001,length(s)-1)
lambda <- abs(rnorm(length(s)-1,sd=0.001))
gamma  <- 0.01
vsp <- sp_cons(X=s,Y=r,V=v1,lambda,gamma)
w <- c(Inf,lambda,Inf)
x_star <- vsp$x
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
coff <- adapCofBayesVSpline(X=s,Y=r,V=v1,w=w,gamma)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=s,Y=r,V=v1,coff,
w=w,gamma,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
plot(s,r)
points(x_star,GPmean_x,type = "b",pch=20)
points(vsp$x,vsp$y,type = "b",pch=20,col="red")
vsp$y
GPmean_x
document()
