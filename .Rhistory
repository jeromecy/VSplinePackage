(conditional_claims <- sum(average.claims * cond.driver$driver))
## [1] 0.4789
## [1] 0.4789
## [1] 0.4789
c3 <- cptable(~year_3 | driver,
values = c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels = as.character(claims))
plist2 <- compileCPT(list(d, c1, c2, c3))
pn2 <- grain(plist2)
pn2 <- setEvidence(pn2, nslist = list(year_1 = "0",
year_2 = "1"))
(prob_year_3 <- querygrain(pn2, nodes = "year_3",
type = "marginal")$year_3)
sum(prob_year_3 * claims)
?reml
install.packages("yaml")
library(lme4)`
''
``
library(lme4)
?reml
??reml
library(metaSEM)
install.packages("metaSEM")
library(metaSEM)
?reml
?lmer
??lmer
library(lme4)
?lmer
?lmer.mcmc
?MCMCglmm
?MCMCglmm
?lmer
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
#set working directory
#go to tools/set working directory/To Source File Allocation
##############################################################
library(rstudioapi)
library(asreml)
library(gstat)
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
wald(nin89.asr)
nin89$linrow <- as.numeric(nin89$Row) - mean(as.numeric(nin89$Row), na.rm = T)
nin89$linrow
residual = ~dsum(~ar1(Column):ar1(Row) | Site)
residual
?dsum
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
#set working directory
#go to tools/set working directory/To Source File Allocation
##############################################################
library(rstudioapi)
library(asreml)
library(gstat)
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
wald(nin89.asr)
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
names(oats)
## oats ###
names(oats)
asreml.options(gammaPar = TRUE)
head(oats)
oats.asr <- asreml(fixed = yield ~ Variety + Nitrogen + Variety:Nitrogen,
random = ~idv(Blocks) + idv(Blocks):idv(Wplots),
residual = ~idv(units), data = oats)
summary(oats.asr)$varcomp
summary(oats.asr)
wald(oats.asr)
oats.wld <- wald(oats.asr, denDF = "default")
oats.wld
oatsV.pv <- predict(oats.asr, classify = "Variety", sed = T)
oatsV.pv
rats.asr <- asreml(weight ~ littersize + Dose + Sex + Dose:Sex, random = ~idv(Dam),
residual = ~idv(units), data = rats)
head(rats)
rats.asr
summary(rats.asr)
rats.asr$trace[, (-2:-5)]
wald(rats.asr, denDF = "default", ssType = "conditional")$Wald
plot(rats.asr, formula = resid(.) ~ fitted(.), fun = "xyplot")
names(shf)
head(shf)
plot(shf)
asreml.options(gammaPar = TRUE)
barley1.asr <- asreml(yield ~ Variety, residual = ~ar1v(Row):ar1(Column), data = shf)
summary(barley1.asr)
wald(barley1.asr)
plot(varioGram(barley1.asr))
barley2.asr <- asreml(yield ~ Variety, random = ~idv(units), residual =
~ar1v(Row):ar1(Column), data = shf)
summary(barley2.asr)
plot(varioGram(barley2.asr))
barley3.asr <- asreml(yield ~ Variety, random = ~Rep + RowBlk + ColBlk, data = shf)
summary(barley3.asr)
plot(varioGram(barley3.asr))
names(orange)
plot(orang)
plot(orange)
asreml.options(gammaPar = TRUE)
orange.asr <- asreml(circ ~ x, random = ~spl(x), residual = ~idv(units), knot.points =
list(x = c(118, 484, 664, 1004, 1231, 1372, 1582)), data = orange, subset = Tree == 1)
orange.pv <- predict(orange.asr, classify = "x",
design.points = list(x = seq(150, 1500, 50)))
summary(orange.asr)
summary(orange.pv)
plot(varioGram(orange.pv))
plot(varioGram(orange.asr))
plot(varioGram(orange.asr))
summary(orange.asr)
plot(orange.asr)
shiny::runApp('Curtin/Shiny2')
install.packages("dplyr")
runApp('Curtin/Shiny2')
rm(list=ls())
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
library(roxygen)
install.packages("roxygen2")
library(roxygen2)
setwd("parent_directory")
setwd(dir = "Otago/RCode/Spline/VSpline")
setwd(dir = "Otago/RCode/VSplinePack/")
setwd(dir = "Otago/RCode/VSplinePack")
setwd("Otago/RCode/VSplinePack")
setwd("C:\Users\279302D\OneDrive - Curtin\Documents\Otago\RCode\VSplinePack")
setwd("C:/Users/279302D/OneDrive - Curtin/Documents/Otago/RCode/VSplinePack")
create("VSpline")
setwd("./VSpline")
setwd("/VSpline")
getwd()
document()
install("VSpline")
setwd("..")
getwd()
document()
install("VSpline")
?cat_function()
#' @title Kernel functions of Bayes estimate of V-Splines
#'
#' @description Kernel functions \eqn{R_1(s,t), \dot{R}_1(s,t),
#' R'_1(s,t), \dot{R}'_1(s,t)}.
#'
#' @keywords Kernel functions
#'
#' @references Z. Cao, D. Bryant, C. Fox, T. Molten and M. Parry. "V-Spline: an Adaptive Smoothing Spline
#' for Trajectory Reconstruction" arXiv preprint arXiv:1803.07184 (2018).
#' @references Z. Cao, D. Bryant, and M. Parry. "V-spline and its Bayes estimate" arXiv (2018).
#' @export
R1<- function(x,y){
return(abs(x-y)*min(x,y)^2/2+min(x,y)^3/3)
}
#' @rdname R1
dotR1<- function(x,y){
return(y*min(x,y)-min(x,y)^2/2)
}
#' @rdname R1
dR1<- function(x,y){
return(x*min(x,y)-min(x,y)^2/2)
}
#' @rdname R1
ddotR1<- function(x,y){
return(min(x,y))
}
#' @rdname R1
ddotdotR1<- function(x,y){
if(y>=x) return(1)
else if(y<x)  return(0)
}
#' @rdname R1
dotdotR1<- function(x,y){
if(y>=x) return(y-x)
else if(y<x)  return(0)
}
#'
#' @title REML score of GPR V-splines
#'
#' @description Parameter estimation by REML
#' @export
remlScore_VSpline<- function(X,Y,V,W,U,pa){
print(pa)
lambda = exp(pa[1])
gamma  = exp(pa[2])
ob<- c(Y,V)
n=length(X)
S=matrix(0,nrow=n,ncol=2)
S[,1]=1
S[,2]=X
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=R1(X[j],X[i])
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1(X[j],X[i])
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=dR1(X[j],X[i])
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=ddotR1(X[j],X[i])
TT<- rbind(S,dS)
var_y <- Q+n*lambda*W
cov_yv<- P
cov_vy<- dQ
var_v <- dP+n*lambda/gamma*U
M <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
R <- chol(M)
inM<- solve(R)%*%solve(t(R))
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
# pd <- inW %*%t(TT)%*%inM
# pe <- inM%*%TT%*%inW
#
# bc<- pbc%*%ob
# d <- pd%*%ob
# Q1 <- qr.Q(qr(TT),complete = TRUE)[,1:2]
# Q2 <- qr.Q(qr(TT),complete = TRUE)[,3:94]
# A <- diag(n) - n*lambda*Q2%*%solve(t(Q2)%*%(Q+diag(n*lambda,n))%*%Q2)%*%t(Q2)
# B <- diag(n) - n*lambda/gamma*dQ2%*%solve(t(dQ2)%*%(dP+diag(n*lambda/gamma,n))%*%dQ2)%*%t(dQ2)
# matA <- rbind(cbind(A,matrix(0,n,n)),cbind(matrix(0,n,n),B))
matA <- diag(2*n)-diag(rep(c(lambda*n,lambda*n/gamma),each=n))%*%pbc
reml <- t(ob)%*%t(diag(2*n)-t(matA))%*%(diag(2*n)-t(matA))%*%ob/
sum(diag(diag(2*n)-matA))
return(reml)
}
#'
#' @title GPR V-splines
#'
#' @description Model fitting
#' @export
BayesVSpline<- function(X,Y,V,coff,est){
ob<- c(Y,V)
bc<- coff$pbc%*%ob
d <- coff$pd%*%ob
n<- length(X)
phi=matrix(c(1,est),nrow=2,ncol=1)
xi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)  xi[i,1]=R1(X[i],est)
psi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)
psi[i,1]=dotR1(X[i],est)
newPa <- c(xi,psi)
mu <- t(phi)%*%d+t(newPa)%*%bc
sig<- R1(est,est) + t(phi)%*%coff$inW%*%phi- t(newPa)%*%coff$pbc%*%newPa -
t(phi)%*%coff$pd%*%newPa - t(newPa)%*%coff$pe%*%phi
dphi=matrix(c(0,1),nrow=2,ncol=1)
dxi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n) dxi[i,1]=dR1(X[i],est)
dpsi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n) dpsi[i,1]=ddotR1(X[i],est)
dnewPa <- c(dxi,dpsi)
mv <- t(dphi)%*%d+t(dnewPa)%*%bc
return(list(mu=mu,sig=sig,mv = mv))
}
#'
#' @title Coefficients
#'
#' @description To reconstruct the coefficients.
#' @export
cofBayesVSpline <- function(X,Y,V,W,U,pa){
lambda = exp(pa[1])
gamma  = exp(pa[2])
n=length(X)
S=matrix(0,nrow=n,ncol=2)
S[,1]=1
S[,2]=X
# dis = diff(X)
# dd  = abs(diff(Y))
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=R1(X[j],X[i])
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1(X[j],X[i])
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=dR1(X[j],X[i])
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=ddotR1(X[j],X[i])
TT<- rbind(S,dS)
var_y <- Q+n*lambda*W
cov_yv<- P
cov_vy<- dQ
var_v <- dP+n*lambda/gamma*U
M <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
#inM=solve(M)
R<- chol(M)
inM<- solve(R)%*%solve(t(R))
# ob<- c(Y,V)
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
pd <- inW %*%t(TT)%*%inM
pe <- inM%*%TT%*%inW
return(list(pbc=pbc,pd=pd,pe=pe,inW=inW))
}
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,inil=c(1,1),xout=NULL){
if(is.na(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
if(is.na(W)) W <- diag(length(X))
if(is.na(U)) U <- diag(length(X))
paraGPR <- remlScore_VSpline(X,Y,V,W,U,pa)
coff    <- optim(pa=inil,fn=cofGPRVspline,X,Y,V,W,U)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
coff      <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
dat <- data.frame(Yield = c(9.9,20.3,27.5,31.4,28.1,
7.8,22.6,30.3,27.2,25.7,
10.7,23.9,29.2,33.4,31.9))
dat$Block <- rep(c("I","II","III"),each=5)
dat$Block <- as.factor(dat$Block)
dat$Fert  <- rep(c(0,35,70,105,140),3)
dat$v <- round(c(diff(dat$Yield)/diff(dat$Fert),0),2)
dat$v[c(5,10,15)] <- 0
sortDat <- dat[order(dat$Fert),]
dat
sortDat
names(sortDat) <- c("y","Block","x","v")
fitBayesVSpline(sortDat)
xout=NULL
is.na(xout)
xout
is.null()
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,inil=c(1,1),xout=NULL){
if(is.null(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
paraGPR <- remlScore_VSpline(X,Y,V,W,U,pa)
coff    <- optim(pa=inil,fn=cofGPRVspline,X,Y,V,W,U)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
coff      <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
fitBayesVSpline(sortDat)
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,inil=c(1,1),xout=NULL){
if(is.null(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
paraGPR <- remlScore_VSpline(X,Y,V,W,U,pa)
coff    <- optim(pa=inil,fn=cofBayesVSpline,X,Y,V,W,U)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
coff      <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
fitBayesVSpline(sortDat)
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,pa=c(1,1),xout=NULL){
if(is.null(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
paraGPR <- remlScore_VSpline(X,Y,V,W,U,pa)
coff    <- optim(pa=pa,fn=cofBayesVSpline,X,Y,V,W,U)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
coff      <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
dat <- data.frame(Yield = c(9.9,20.3,27.5,31.4,28.1,
7.8,22.6,30.3,27.2,25.7,
10.7,23.9,29.2,33.4,31.9))
fitBayesVSpline(sortDat)
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,pa=c(1,1),xout=NULL){
if(is.null(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
paraGPR <- optim(pa=pa,fn=remlScore_VSpline,X,Y,V,W,U)
coff    <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
fitBayesVSpline(sortDat)
#'
#' @title Bayes estimate of V-Spline model
#' @description
#' @export
fitBayesVSpline <- function(dat,W=NULL,U=NULL,pa=c(1,1),xout=NULL){
if(is.null(xout)) x_star <- dat$x
else x_star <- xout
X<- dat$x
Y<- dat$y
V<- dat$v
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
paraGPR <- optim(pa=pa,fn=remlScore_VSpline,X=X,Y=Y,V=V,W=W,U=U)
coff    <- cofBayesVSpline(X,Y,V,W,U,paraGPR$par)
for(l in 1:length(x_star)){
gen        <- BayesVSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(x=x_star,y=GPmean_x,sig=GPsig_x,v=GPmean_v))
}
fitBayesVSpline(sortDat)
library(VSPline)
?fitBayesVSpline
library(devtools)
install_github("jeromecy/VSplinePackage")
install_github("jeromecy/VSplinePackage",force = TRUE)
getwd()
document()
