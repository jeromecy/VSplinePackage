Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=R1(X[j],X[i])
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=dotR1(X[j],X[i])
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=dR1(X[j],X[i])
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=ddotR1(X[j],X[i])
TT=rbind(S,dS)
var_y<- Q+n*lambda*W  #diag(n)
cov_yv<- P
cov_vy<- dQ
var_v<- dP+n*lambda/gamma*U  #diag(n)
M=rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
#inM=solve(M)
R=chol(M)
inM=solve(R)%*%solve(t(R))
ob=c(Y,V)
d=solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM%*%ob
bc=(inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM)%*%ob
c=bc[1:n]
b=bc[(n+1):(2*n)]
return(list(d=d,c=c,b=b))
}
bcdgen<- function(X,Y,V,d,c,b,est){
n=length(X)
phi=matrix(c(1,est),nrow=2,ncol=1)
xi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)  xi[i,1]=R1(X[i],est)
psi<- matrix(0,nrow=n,ncol=1)
for(i in 1:n)
psi[i,1]=dotR1(X[i],est)
J=t(phi)%*%d+t(xi)%*%c+t(psi)%*%b
return(J)
}
bcdgp_piecewise<- function(X,Y,V,lambda,gamma,W,U){
n    = length(X)
S    = matrix(0,nrow=n,ncol=2)
S[,1]= 1
S[,2]= X
w    = lambda/sum(lambda)
Q<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
Q[i,j]=pwR1(X[j],X[i],w,X)
P<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
P[i,j]=pwdotR1(X[j],X[i],w,X)
dS<- matrix(c(0,1),nrow=n,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dQ[i,j]=pwdR1(X[j],X[i],w,X)
dP<- matrix(0,nrow=n,ncol=n)
for(i in 1:n)
for(j in 1:n)
dP[i,j]=pwddotR1(X[j],X[i],w,X)
TT    = rbind(S,dS)
var_y = Q+n*sum(lambda)*diag(n)
cov_yv= P
cov_vy= dQ
var_v = dP+n*sum(lambda)/gamma*diag(n)
M  = rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
inM=solve(M)
# R  = chol(M)
# inM= solve(R)%*%solve(t(R))
ob = c(Y,V)
d  = solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM%*%ob
bc = (inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM)%*%ob
c  = bc[1:n]
b  = bc[(n+1):(2*n)]
return(list(d=d,c=c,b=b))
}
lambda = 1e-5
gamma  = 1
# x_star = seq(0,1,length=5*n)
#x_star = seq(0,1,length=100)
sp_cov = smoothing_cov(X,Y,V,lambda,gamma,W=diag(n),U=diag(n))
# plot(X,Y,xlim=c(0,1))
# points(sp_cov$x,sp_cov$y,col="red",type="l",lwd=2,lty=2)
x_star    = sp_cov$x
GPmean_x  = numeric(length(x_star))
GPsig_x   = numeric(length(x_star))
coff      = cof_VSpline(X,Y,V,lambda,gamma)
for(l in 1:length(x_star)){
gen        <- gpr_VSpline(X,Y,V,coff,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
}
ggcomp<- ggplot(data.frame(x=x_star,y=GPmean_x,sd=sqrt(GPsig_x)))+
geom_point(data=data.frame(x=X,y=Y),aes(x,y),size=3) +
geom_ribbon(aes(x=x,ymin=y-4*sd, ymax=y+4*sd),fill = "grey70",alpha=0.5)+
geom_line(aes(x,y),lwd=0.8,linetype = "dashed")+
geom_line(data=data.frame(x=sp_cov$x,y=sp_cov$y),aes(x,y),lwd=0.8,linetype = "dotdash")
ggcomp + theme(axis.title = element_blank(),
axis.text = element_text(size=20))
ggcomp<- ggplot(data.frame(x=x_star,y=GPmean_x,sd=sqrt(GPsig_x)))+
geom_point(data=data.frame(x=X,y=Y),aes(x,y),size=3) +
geom_ribbon(aes(x=x,ymin=y-4*sd, ymax=y+4*sd),fill = "grey70",alpha=0.5)+
geom_line(aes(x,y),lwd=0.8,linetype = "dashed")+
geom_line(data=data.frame(x=sp_cov$x,y=sp_cov$y),aes(x,y),lwd=0.8,linetype = "dotdash")
ggcomp + theme(axis.title = element_blank(),
axis.text = element_text(size=20)) +  theme_bw()
ggcomp + theme(axis.title = element_blank(),
axis.text = element_text(size=20)) +  theme_bw()
ggcomp + theme(axis.title = element_blank(),
axis.text = element_text(size=20),
panel.background = element_blank())
ggcomp + theme_bw() + theme(axis.title = element_blank(),
axis.text = element_text(size=20))
ggcomp<- ggplot(data.frame(x=x_star,y=GPmean_x,sd=sqrt(GPsig_x)))+
geom_ribbon(aes(x=x,ymin=y-4*sd, ymax=y+4*sd),fill = "grey70",alpha=0.5)+
geom_line(aes(x,y),lwd=0.8,linetype = "dashed")+
geom_line(data=data.frame(x=sp_cov$x,y=sp_cov$y),aes(x,y),lwd=0.8,linetype = "dotdash") +  geom_point(data=data.frame(x=X,y=Y),aes(x,y),size=3)
ggcomp + theme_bw() + theme(axis.title = element_blank(),
axis.text = element_text(size=20))
library(asreml)
library(msanova)
?asreml
shiny::runApp('Curtin/Shiny2')
java()
rem2 <- function (){
library(nlme)
a0 <- 9.9
a1 <- 2
# 对6个人重复测量多次
ni <- c(12, 13, 14, 15, 16, 13)
nyear <- length(ni)
set.seed(205)
# 构造x值
xx <- matrix(rep(0, length=max(ni) * nyear),
ncol = nyear)
for (ii in 1:nyear){
xx[1:ni[ii], ii] <- runif(ni[ii], min = 1,
max = 5)
xx[1:ni[ii], ii] <- sort(xx[1:ni[ii], ii])
}
bbi <- rnorm(nyear, mean = 0, sd = 10) # 随机效应
xxall <- NULL
yall <- NULL
yearall <- NULL
for (ii in 1:nyear){
xxall <- c(xxall, xx[1:ni[ii], ii])
yy <- rep(a0 + bbi[ii], length = ni[ii]) +
a1 * xx[1:ni[ii],ii] +
rnorm(ni[ii], mean = 0, sd = 0.5) # 噪声
yall <- c(yall, yy)
year <- rep(ii, length = ni[ii])
yearall <- c(yearall, year)
}
data1 <- data.frame(yall = yall, yearall =
yearall, xxall = xxall)
# 建模
lme1 <- lme(yall~xxall,random=~1|yearall,data=data1)
print(summary(lme1))
coef1a <- lme1$coef$fixed[1]
coef1b <- lme1$coef$fixed[2]
coef2 <- lme1$coef$random$yearall
sigma1 <- lme1$sigma
par(mai = c(1, 1, 1, 1), omi = c(0, 0, 0, 0))
plot(xxall, yall, xlab = "x", ylab = "y",
type = "n")
ct1 <- 0
for(kk in 1:nyear){
points(xxall[(ct1 + 1):(ct1 + ni[kk])],
yall[(ct1 + 1):(ct1 + ni[kk])], pch = kk)
lines(xxall[(ct1 + 1):(ct1 + ni[kk])],
coef1a + coef2[kk] + coef1b *
xxall[(ct1 + 1):(ct1 + ni[kk])], lwd = 1)
ct1 <- ct1 + ni[kk]
}
xxalls <- sort(xxall)
lines(xxalls, coef1a + coef1b * xxalls,
lwd = 3, lty = 4)
}
rem2()
?lme
library(nlme)
a0 <- 9.9
a1 <- 2
# 对6个人重复测量多次
ni <- c(12, 13, 14, 15, 16, 13)
nyear <- length(ni)
set.seed(205)
# 构造x值
xx <- matrix(rep(0, length=max(ni) * nyear),
ncol = nyear)
xx
for (ii in 1:nyear){
xx[1:ni[ii], ii] <- runif(ni[ii], min = 1,
max = 5)
xx[1:ni[ii], ii] <- sort(xx[1:ni[ii], ii])
}
xx
bbi <- rnorm(nyear, mean = 0, sd = 10) # 随机效应
xxall <- NULL
yall <- NULL
yearall <- NULL
bbi
for (ii in 1:nyear){
xxall <- c(xxall, xx[1:ni[ii], ii])
yy <- rep(a0 + bbi[ii], length = ni[ii]) +
a1 * xx[1:ni[ii],ii] +
rnorm(ni[ii], mean = 0, sd = 0.5) # 噪声
yall <- c(yall, yy)
year <- rep(ii, length = ni[ii])
yearall <- c(yearall, year)
}
data1 <- data.frame(yall = yall, yearall =
yearall, xxall = xxall)
data1
xx
ni
nyear
max(ni)
xx[1:ni[ii],ii]
xx
1:ni[ii]
ii
data1
# 建模
lme1 <- lme(yall~xxall,random=~1|yearall,data=data1)
print(summary(lme1))
coef1a <- lme1$coef$fixed[1]
coef1b <- lme1$coef$fixed[2]
coef2 <- lme1$coef$random$yearall
sigma1 <- lme1$sigma
par(mai = c(1, 1, 1, 1), omi = c(0, 0, 0, 0))
plot(xxall, yall, xlab = "x", ylab = "y",
type = "n")
ct1 <- 0
for(kk in 1:nyear){
points(xxall[(ct1 + 1):(ct1 + ni[kk])],
yall[(ct1 + 1):(ct1 + ni[kk])], pch = kk)
lines(xxall[(ct1 + 1):(ct1 + ni[kk])],
coef1a + coef2[kk] + coef1b *
xxall[(ct1 + 1):(ct1 + ni[kk])], lwd = 1)
ct1 <- ct1 + ni[kk]
}
xxalls <- sort(xxall)
lines(xxalls, coef1a + coef1b * xxalls,
lwd = 3, lty = 4)
xxalls
coef1a + coef1b * xxalls
lme1$coef
lme1$coef$fixed
library(gRain)
# Distribution of good and bad drivers
d <- cptable(~ driver, values=c(0.75, 0.25),
levels=c("good", "bad"))
#Expected claims by driver type
claims <- c(0, 1, 2)
c1 <- cptable(~ year_1|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
c2 <- cptable(~ year_2|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
plist <- compileCPT(list(d, c1, c2))
## Review probabilities
pn <- grain(plist)
mosaicplot(pn[["cptlist"]][["year_1"]], color=TRUE,
main="Conditional Probabilities",
xlab="Number of claims per year",
ylab="Driver type")
pn[["cptlist"]]
library(gRain)
# Distribution of good and bad drivers
d <- cptable(~ driver, values=c(0.75, 0.25),
levels=c("good", "bad"))
library(gRain)
install.packages(gRain)
install.packages("gRain")
library(gRain)
# Distribution of good and bad drivers
d <- cptable(~ driver, values=c(0.75, 0.25),
levels=c("good", "bad"))
#Expected claims by driver type
claims <- c(0, 1, 2)
c1 <- cptable(~ year_1|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
library(gRain)
install.packages("RBGL")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RBGL", version = "3.8")
library(gRain)
# Distribution of good and bad drivers
d <- cptable(~ driver, values=c(0.75, 0.25),
levels=c("good", "bad"))
#Expected claims by driver type
claims <- c(0, 1, 2)
c1 <- cptable(~ year_1|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
c2 <- cptable(~ year_2|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
plist <- compileCPT(list(d, c1, c2))
## Review probabilities
pn <- grain(plist)
mosaicplot(pn[["cptlist"]][["year_1"]], color=TRUE,
main="Conditional Probabilities",
xlab="Number of claims per year",
ylab="Driver type")
pn[["cptlist"]]
(average.claims <- colSums(sweep(plist[["year_1"]], 1, claims, "*")))
(unconditional_claims <- sum(average.claims * plist[["driver"]]))
plot(pn[["dag"]], main="Claims network example",
attrs = list(node = list(fillcolor = "lightgreen"),
edge = list(color = "blue"),
graph = list(rankdir = "LR")))
plot(pn[["dag"]], main="Claims network example",
attrs = list(node = list(fillcolor = "lightgreen"),
edge = list(color = "blue"),
graph = list(rankdir = "LR")))
library(gRain)
# Distribution of good and bad drivers
d <- cptable(~ driver, values=c(0.75, 0.25),
levels=c("good", "bad"))
#Expected claims by driver type
claims <- c(0, 1, 2)
c1 <- cptable(~ year_1|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
c2 <- cptable(~ year_2|driver,
values=c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels=as.character(claims))
plist <- compileCPT(list(d, c1, c2))
## Review probabilities
pn <- grain(plist)
mosaicplot(pn[["cptlist"]][["year_1"]], color=TRUE,
main="Conditional Probabilities",
xlab="Number of claims per year",
ylab="Driver type")
pn[["cptlist"]]
(average.claims <- colSums(sweep(plist[["year_1"]], 1, claims, "*")))
## good  bad
##  0.4  0.7
(unconditional_claims <- sum(average.claims * plist[["driver"]]))
## [1] 0.475
plot(pn[["dag"]], main="Claims network example",
attrs = list(node = list(fillcolor = "lightgreen"),
edge = list(color = "blue"),
graph = list(rankdir = "LR")))
pn
grain(plist)
pn1 <- setEvidence(pn, nslist = list(year_1 = "0", year_2 = "1"))
pEvidence(pn1)
## [1] 0.1425
(cond.driver <- querygrain(pn1, nodes = "driver", type = "marginal"))
## $driver
## driver
##   good    bad
## 0.7368 0.2632
(conditional_claims <- sum(average.claims * cond.driver$driver))
## [1] 0.4789
## [1] 0.4789
## [1] 0.4789
c3 <- cptable(~year_3 | driver,
values = c(0.7, 0.2, 0.1, 0.5, 0.3, 0.2),
levels = as.character(claims))
plist2 <- compileCPT(list(d, c1, c2, c3))
pn2 <- grain(plist2)
pn2 <- setEvidence(pn2, nslist = list(year_1 = "0",
year_2 = "1"))
(prob_year_3 <- querygrain(pn2, nodes = "year_3",
type = "marginal")$year_3)
sum(prob_year_3 * claims)
?reml
install.packages("yaml")
library(lme4)`
''
``
library(lme4)
?reml
??reml
library(metaSEM)
install.packages("metaSEM")
library(metaSEM)
?reml
?lmer
??lmer
library(lme4)
?lmer
?lmer.mcmc
?MCMCglmm
?MCMCglmm
?lmer
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
#set working directory
#go to tools/set working directory/To Source File Allocation
##############################################################
library(rstudioapi)
library(asreml)
library(gstat)
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
wald(nin89.asr)
nin89$linrow <- as.numeric(nin89$Row) - mean(as.numeric(nin89$Row), na.rm = T)
nin89$linrow
residual = ~dsum(~ar1(Column):ar1(Row) | Site)
residual
?dsum
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
#set working directory
#go to tools/set working directory/To Source File Allocation
##############################################################
library(rstudioapi)
library(asreml)
library(gstat)
nin89.asr <- asreml(fixed = yield ~Variety, random =~idv(Rep),
residual =~idv(units), na.action = na.method(x = "include"),
data = nin89)
wald(nin89.asr)
sp.asr <- asreml(yield ~ Variety, residual = ~idv(Column):ar1(Row), data = nin89)
names(oats)
## oats ###
names(oats)
asreml.options(gammaPar = TRUE)
head(oats)
oats.asr <- asreml(fixed = yield ~ Variety + Nitrogen + Variety:Nitrogen,
random = ~idv(Blocks) + idv(Blocks):idv(Wplots),
residual = ~idv(units), data = oats)
summary(oats.asr)$varcomp
summary(oats.asr)
wald(oats.asr)
oats.wld <- wald(oats.asr, denDF = "default")
oats.wld
oatsV.pv <- predict(oats.asr, classify = "Variety", sed = T)
oatsV.pv
rats.asr <- asreml(weight ~ littersize + Dose + Sex + Dose:Sex, random = ~idv(Dam),
residual = ~idv(units), data = rats)
head(rats)
rats.asr
summary(rats.asr)
rats.asr$trace[, (-2:-5)]
wald(rats.asr, denDF = "default", ssType = "conditional")$Wald
plot(rats.asr, formula = resid(.) ~ fitted(.), fun = "xyplot")
names(shf)
head(shf)
plot(shf)
asreml.options(gammaPar = TRUE)
barley1.asr <- asreml(yield ~ Variety, residual = ~ar1v(Row):ar1(Column), data = shf)
summary(barley1.asr)
wald(barley1.asr)
plot(varioGram(barley1.asr))
barley2.asr <- asreml(yield ~ Variety, random = ~idv(units), residual =
~ar1v(Row):ar1(Column), data = shf)
summary(barley2.asr)
plot(varioGram(barley2.asr))
barley3.asr <- asreml(yield ~ Variety, random = ~Rep + RowBlk + ColBlk, data = shf)
summary(barley3.asr)
plot(varioGram(barley3.asr))
names(orange)
plot(orang)
plot(orange)
asreml.options(gammaPar = TRUE)
orange.asr <- asreml(circ ~ x, random = ~spl(x), residual = ~idv(units), knot.points =
list(x = c(118, 484, 664, 1004, 1231, 1372, 1582)), data = orange, subset = Tree == 1)
orange.pv <- predict(orange.asr, classify = "x",
design.points = list(x = seq(150, 1500, 50)))
summary(orange.asr)
summary(orange.pv)
plot(varioGram(orange.pv))
plot(varioGram(orange.asr))
plot(varioGram(orange.asr))
summary(orange.asr)
plot(orange.asr)
shiny::runApp('Curtin/Shiny2')
install.packages("dplyr")
runApp('Curtin/Shiny2')
rm(list=ls())
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
library(roxygen)
install.packages("roxygen2")
library(roxygen2)
setwd("parent_directory")
setwd(dir = "Otago/RCode/Spline/VSpline")
setwd(dir = "Otago/RCode/VSplinePack/")
setwd(dir = "Otago/RCode/VSplinePack")
setwd("Otago/RCode/VSplinePack")
setwd("C:\Users\279302D\OneDrive - Curtin\Documents\Otago\RCode\VSplinePack")
setwd("C:/Users/279302D/OneDrive - Curtin/Documents/Otago/RCode/VSplinePack")
create("VSpline")
setwd("./VSpline")
setwd("/VSpline")
getwd()
document()
install("VSpline")
setwd("..")
getwd()
document()
install("VSpline")
?cat_function()
