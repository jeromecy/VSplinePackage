return(abs(x1-y1)*min(x1,y1)^2/2+min(x1,y1)^3/3)
}
#' @rdname kernelR1
dotR1<- function(x1,y1){
return(y1*min(x1,y1)-min(x1,y1)^2/2)
}
#' @rdname kernelR1
dR1<- function(x1,y1){
return(x1*min(x1,y1)-min(x1,y1)^2/2)
}
#' @rdname kernelR1
ddotR1<- function(x1,y1){
return(min(x1,y1))
}
#' @rdname kernelR1
ddotdotR1<- function(x1,y1){
if(y1>=x1) return(0) # was 1
else if(y1<x1)  return(1) # was 0
}
#' @rdname kernelR1
dotdotR1<- function(x1,y1){
if(y1>=x1) return(y1-x1)
else if(y1<x1)  return(0)
}
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par)
#'
#' @title GPR V-splines
#'
#' @description Model fitting
#' @export
BayesVSpline<- function(X,Y,V,coff,est){
ob<- c(Y,V)
bc<- coff$pbc%*%ob
d <- coff$pd%*%ob
rowlen<- length(X)
phi<- matrix(c(1,est),nrow=2,ncol=1)
xi<- matrix(0,nrow=rowlen,ncol=1)
for(i in 1:rowlen)  xi[i,1] <- kernelR1(X[i],est)
psi<- matrix(0,nrow=rowlen,ncol=1)
for(i in 1:rowlen)  psi[i,1]<- dotR1(X[i],est)
newPa <- c(xi,psi)
#
mu <- t(phi)%*%d+t(newPa)%*%bc
sig<- kernelR1(est,est) + t(phi)%*%coff$inW%*%phi- t(newPa)%*%coff$pbc%*%newPa -
t(phi)%*%coff$pd%*%newPa - t(newPa)%*%coff$pe%*%phi
dphi<- matrix(c(0,1),nrow=2,ncol=1)
dxi<- matrix(0,nrow=rowlen,ncol=1)
for(i in 1:rowlen) dxi[i,1] <- dR1(X[i],est)
dpsi<- matrix(0,nrow=rowlen,ncol=1)
for(i in 1:rowlen) dpsi[i,1]<- ddotR1(X[i],est)
dnewPa <- c(dxi,dpsi)
mv     <- t(dphi)%*%d+t(dnewPa)%*%bc
return(list(mu=mu,sig=sig,mv = mv))
}
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par)
f3$y
f2$vsp$y
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,
lab=lab,gamma=gm,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
f3 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par)
#'
#' @title Coefficients for adaptive V-splines
#'
#' @description To reconstruct the coefficients for adaptive V-splines.
#' @export
adapCofBayesVSpline <- function(X,Y,V,lambs,gam){
rowlen = length(X)
alt    = X
adapS     = matrix(0,nrow=rowlen,ncol=2)
adapS[,1] = 1
adapS[,2] = X
adapQ<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
adapQ[i,j]=kernelR1adap(X[j],X[i],lambs,alt)
adapP<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
adapP[i,j]=dotR1adap(X[j],X[i],lambs,alt)
adapdS<- matrix(c(0,1),nrow=rowlen,ncol=2,byrow=TRUE)
adapdQ<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
adapdQ[i,j]=dR1adap(X[j],X[i],lambs,alt)
adapdP<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
adapdP[i,j]=ddotR1adap(X[j],X[i],lambs,alt)
TT<- rbind(adapS,adapdS)
var_y <- adapQ+rowlen*diag(rowlen)
cov_yv<- adapP
cov_vy<- adapdQ
var_v <- adapdP+rowlen*diag(rowlen)/gam
Mlab <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
# inM=solve(Mlab)
Rlab <- chol(Mlab)
inM  <- solve(Rlab)%*%solve(t(Rlab))
# ob<- c(Y,V)
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
pd <- inW %*%t(TT)%*%inM
pe <- inM%*%TT%*%inW
return(list(pbc=pbc,pd=pd,pe=pe,inW=inW))
}
dt2
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,
lab=lab,gamma=gm,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
f3 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par)
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,
lab=lab,gam=gm,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,
lambs=lab,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
f3 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par)
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,
lambs=labs,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
f3 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par)
f3$y
f3$y
f2 <- fitVSP(dt2,a=0,b=0)
f2 <- fitVSP(dt2,a=0,b=0)
f2$vsp$y
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par,a=0,b=0)
f3$y
f4 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par,a=0,b=0)
f4$y
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par)
f3$y
f4 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par,a=0,b=0)
f4$y
f2$vsp$y
f2 <- fitVSP(dt2,a=3,b=3)
f2$vsp$y
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par)
f3$y
f2 <- fitVSP(dt2,a=3,b=2)
f2$vsp$y
f3 <- fitBayesVSpline(dt2,pa=f2$oppa$par)
f3$y
f4 <- fitAdapBayesVSpline(dt2,pa=f2$oppa$par,a=3,b=2)
f4$y
f2$vsp$y
f5<- fitAdapBayesVSpline(dt2)
#'
#' @title REML score of GPR V-splines
#'
#' @description Parameter estimation by REML
#' @export
remlAdaptVSpline<- function(X,Y,V,lambs,pa){
# print(pa)
lambs  <- lambs*exp(pa[1])
gam    <- exp(pa[2])
ob     <- c(Y,V)
rowlen <- length(X)
alt    <- X
S     <- matrix(0,nrow=rowlen,ncol=2)
S[,1] <- 1
S[,2] <- X
Q<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
Q[i,j]<-kernelR1adap(X[j],X[i],lambs,alt)
P<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
P[i,j]<-dotR1adap(X[j],X[i],lambs,alt)
dS<- matrix(c(0,1),nrow=rowlen,ncol=2,byrow=TRUE)
dQ<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
dQ[i,j]<-dR1adap(X[j],X[i],lambs,alt)
dP<- matrix(0,nrow=rowlen,ncol=rowlen)
for(i in 1:rowlen)
for(j in 1:rowlen)
dP[i,j]<-ddotR1adap(X[j],X[i],lambs,alt)
TT<- rbind(S,dS)
var_y <- Q+rowlen*diag(rowlen)
cov_yv<- P
cov_vy<- dQ
var_v <- dP+rowlen*diag(rowlen)/gam
M  <- rbind(cbind(var_y,cov_yv),cbind(cov_vy,var_v))
R  <- chol(M)
inM<- solve(R)%*%solve(t(R))
inW<- solve(t(TT)%*%inM%*%TT)
pbc<- inM-inM%*%TT%*%solve(t(TT)%*%inM%*%TT)%*%t(TT)%*%inM
matA <- diag(2*rowlen)-diag(rep(c(rowlen,rowlen/gam),each=rowlen))%*%pbc
reml <- t(ob)%*%t(diag(2*rowlen)-t(matA))%*%(diag(2*rowlen)-t(matA))%*%ob/
sum(diag(diag(2*rowlen)-matA))
return(reml)
}
f5<- fitAdapBayesVSpline(dt2)
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
pa      <- c(0,0)
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,lambs=labs,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v))
}
f5<- fitAdapBayesVSpline(dt2)
f5$y
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
pa      <- c(0,0)
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
paraGPR <- NULL
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,lambs=labs,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v,par=paraGPR))
}
f5<- fitAdapBayesVSpline(dt2)
f5$par
#'
#' @title Bayes estimate of adaptive V-Splines
#' @description Fitting adaptive V-splines with piecewise \eqn{\lambda}s.
#' @export
fitAdapBayesVSpline <- function(dat,W=NULL,U=NULL,pa=NULL,a=3,b=2,xout=NULL){
if(is.null(xout)) x_star <- dat$t
else x_star <- xout
X<- dat$t
Y<- dat$y
V<- dat$v
rowlen    <- nrow(dat)
GPmean_x  <- numeric(length(x_star))
GPmean_v  <- numeric(length(x_star))
GPsig_x   <- numeric(length(x_star))
fitmu     <- numeric(length(x_star))
fitvar    <- numeric(length(x_star))
if(is.null(W)) W <- diag(length(X))
if(is.null(U)) U <- diag(length(X))
d   <- X[2:rowlen]-X[1:(rowlen-1)]
dist<- abs(diff(Y))
dist[which(dist==0)]=1e-4
lambda <- c(Inf,d^a/dist^b,Inf)
if(is.null(pa)){
pa      <- c(0,0)
paraGPR <- optim(pa=pa,fn=remlAdaptVSpline,X=X,Y=Y,V=V,lambs=lambda)
labs <- lambda*exp(paraGPR$par[1])
gm   <- exp(paraGPR$par[2])
}else{
labs <- lambda*pa[1]
gm   <- pa[2]
}
coff <- adapCofBayesVSpline(X=X,Y=Y,V=V,lambs=labs,gam=gm)
for(l in 1:length(x_star)){
gen        <- adapBayesVSpline(X=X,Y=Y,V=V,coff,lambs=labs,x_star[l])
GPmean_x[l]<- gen$mu
GPsig_x[l] <- gen$sig
GPmean_v[l]<- gen$mv
}
return(list(t=x_star,y=GPmean_x,adpSig=GPsig_x,v=GPmean_v,lambdas=labs,gam=gm))
}
f5<- fitAdapBayesVSpline(dt2)
f5
library(devtools)
document()
library(devtools)
document()
document()
